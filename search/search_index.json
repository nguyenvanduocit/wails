{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Welcome to The Wails Project</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>[darwin] add getPrimaryScreen/getScreens to impl by @tmclane in https://github.com/wailsapp/wails/pull/2618</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed background colours of examples on Windows by mmgvh in #2750.</li> <li>Fixed default context menus by mmgvh in #2753.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":""},{"location":"changelog/#removed","title":"Removed","text":""},{"location":"changelog/#deprecated","title":"Deprecated","text":""},{"location":"changelog/#security","title":"Security","text":""},{"location":"development/changes/","title":"Changes for v3","text":"<p>Note</p> <p>This is currently an unsorted brain dump of changes. It will be organised into a more readable format soon.</p>"},{"location":"development/changes/#options","title":"Options","text":"<p>The application options have been revised since v2. </p>"},{"location":"development/changes/#events","title":"Events","text":"<p>In v3, there are 3 types of events:</p> <ul> <li>Application Events</li> <li>Window Events</li> <li>Custom Events</li> </ul>"},{"location":"development/changes/#application-events","title":"Application Events","text":"<p>Application events are events that are emitted by the application. These events include native events such as <code>ApplicationDidFinishLaunching</code> on macOS.</p>"},{"location":"development/changes/#window-events","title":"Window Events","text":"<p>Window events are events that are emitted by a window. These events include native events such as <code>WindowDidBecomeMain</code> on macOS. Common events are also defined, so they work cross-platform, e.g. <code>WindowClosing</code>.</p>"},{"location":"development/changes/#custom-events","title":"Custom Events","text":"<p>Events that the user defines are called <code>WailsEvents</code>. This is to differentiate them from the <code>Event</code> object that is used to communicate with the browser. WailsEvents are now objects that encapsulate all the details of an event. This includes the event name, the data, and the source of the event.</p> <p>The data associated with a WailsEvent is now a single value. If multiple values are required, then a struct can be used.</p>"},{"location":"development/changes/#event-callbacks-and-emit-function-signature","title":"Event callbacks and <code>Emit</code> function signature","text":"<p>The signatures events callbacks (as used by <code>On</code>, <code>Once</code> &amp; <code>OnMultiple</code>) have changed. In v2, the callback function received optional data. In v3, the callback function receives a <code>WailsEvent</code> object that contains all data related to the event.</p> <p>Similarly, the <code>Emit</code> function has changed. Instead of taking a name and optional data, it now takes a single <code>WailsEvent</code> object that it will emit.</p>"},{"location":"development/changes/#off-and-offall","title":"<code>Off</code> and <code>OffAll</code>","text":"<p>In v2, <code>Off</code> and <code>OffAll</code> calls would remove events in both JS and Go. Due to the multi-window nature of v3, this has been changed so that these methods only apply to the context they are called in. For example, if you call <code>Off</code> in a window, it will only remove events for that window. If you use <code>Off</code> in Go, it will only remove events for Go.</p>"},{"location":"development/changes/#hooks","title":"Hooks","text":"<p>Event Hooks are a new feature in v3. They allow you to hook into the event system and perform actions when certain events are emitted. For example, you can hook into the <code>WindowClosing</code> event and perform some cleanup before the window closes.  Hooks can be registered at the application level or at the window level using <code>RegisterHook</code>. Application level are for application events. Window level hooks will only be called for the window they are registered with.</p>"},{"location":"development/changes/#logging","title":"Logging","text":"<p>Logging in v2 was confusing as both application logs and system (internal) logs were using the same logger. We have simplified this as follows:</p> <ul> <li>Internal logs are now handled using the standard Go <code>slog</code> logger. This is configured using the <code>logger</code> option in the application options. By default, this uses the tint logger.</li> <li>Application logs can now be achieved through the new <code>log</code> plugin which utilises <code>slog</code> under the hood. This plugin provides a simple API for logging to the console. It is available in both Go and JS.</li> </ul>"},{"location":"development/changes/#developer-notes","title":"Developer notes","text":"<p>When emitting an event in Go, it will dispatch the event to local Go listeners and also each window in the application. When emitting an event in JS, it now sends the event to the application. This will be processed as if it was emitted in Go, however the sender ID will be that of the window.</p>"},{"location":"development/changes/#window","title":"Window","text":"<p>The Window API has largely remained the same, however the methods are now on an instance of a window rather than the runtime.  Some notable differences are: - Windows now have a Name that identifies them. This is used to identify the window when emitting events. - Windows have even more methods on the that were previously unavailable, such as <code>AbsolutePosition</code> and <code>ToggleDevTools</code>. - Windows can now accept files via native drag and drop. See the Drag and Drop section for more details.</p>"},{"location":"development/changes/#clipboard","title":"ClipBoard","text":"<p>The clipboard API has been simplified. There is now a single <code>Clipboard</code> object that can be used to read and write to the clipboard. The <code>Clipboard</code> object is available in both Go and JS. <code>SetText()</code> to set the text and <code>Text()</code> to get the text.</p>"},{"location":"development/changes/#bindings","title":"Bindings","text":"<p>Bindings work in a similar way to v2, by providing a means to bind struct methods to the frontend.  These can be called in the frontend using the binding wrappers generated by the <code>wails3 generate bindings</code> command:</p> <pre><code>// @ts-check\n// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH \u00c2 MODIWL\n// This file is automatically generated. DO NOT EDIT\nimport {main} from './models';\nwindow.go = window.go || {};\nwindow.go.main = {\nGreetService: {\n/**\n         * GreetService.Greet\n         * Greet greets a person\n         * @param name {string}\n         * @returns {Promise&lt;string&gt;}\n         **/\nGreet: function(name) { wails.CallByID(1411160069, ...Array.prototype.slice.call(arguments, 0)); },\n/**\n         * GreetService.GreetPerson\n         * GreetPerson greets a person\n         * @param person {main.Person}\n         * @returns {Promise&lt;string&gt;}\n         **/\nGreetPerson: function(person) { wails.CallByID(4021313248, ...Array.prototype.slice.call(arguments, 0)); },\n},\n};\n</code></pre> <p>Bound methods are obfuscated by default, and are identified using uint32 IDs, calculated using the FNV hashing algorithm. This is to prevent the method name from being exposed in production builds.  In debug mode, the method IDs are logged along with the calculated ID of the method to aid in debugging. If you wish to add an extra layer of obfuscation, you can use the <code>BindAliases</code> option. This allows you to specify a map of alias IDs to method IDs. When the frontend calls a method using an ID, the method ID will be looked up in the alias map first for a match. If it does not find it, it assumes it's a standard method ID and tries to find the method in the usual way. </p> <p>Example:</p> <pre><code>    app := application.New(application.Options{\nBind: []any{\n&amp;GreetService{},\n},\nBindAliases: map[uint32]uint32{\n1: 1411160069,\n2: 4021313248,\n},\nAssets: application.AssetOptions{\nFS: assets,\n},\nMac: application.MacOptions{\nApplicationShouldTerminateAfterLastWindowClosed: true,\n},\n})\n</code></pre> <p>We can now call using this alias in the frontend: <code>wails.Call(1, \"world!\")</code>.</p>"},{"location":"development/changes/#insecure-calls","title":"Insecure calls","text":"<p>If you don't mind your calls being available in plain text in your binary and have no intention of using garble, then you can use the insecure <code>wails.CallByName()</code> method. This method takes the fully qualified name of the method to call and the arguments to pass to it. Example:</p> <pre><code>```go\nwails.CallByName(\"main.GreetService.Greet\", \"world!\")\n```\n</code></pre> <p>Danger</p> <p>This is only provided as a convenience method for development. It is not recommended to use this in production.</p>"},{"location":"development/changes/#dialogs","title":"Dialogs","text":"<p>Dialogs are now available in JavaScript! </p>"},{"location":"development/changes/#windows","title":"Windows","text":"<p>Dialog buttons in Windows are not configurable and are constant depending on the type of dialog. To trigger a callback when a button is pressed, create a button with the same name as the button you wish to have the callback attached to. Example: Create a button with the label <code>Ok</code> and use <code>OnClick()</code> to set the callback method: <pre><code>        dialog := app.QuestionDialog().\nSetTitle(\"Update\").\nSetMessage(\"The cancel button is selected when pressing escape\")\nok := dialog.AddButton(\"Ok\")\nok.OnClick(func() {\n// Do something\n})\nno := dialog.AddButton(\"Cancel\")\ndialog.SetDefaultButton(ok)\ndialog.SetCancelButton(no)\ndialog.Show()\n</code></pre></p>"},{"location":"development/changes/#drag-and-drop","title":"Drag and Drop","text":"<p>Native drag and drop can be enabled per-window. Simply set the <code>EnableDragAndDrop</code> window config option to <code>true</code> and the window will allow files to be dragged onto it. When this happens, the <code>events.FilesDropped</code> event will be emitted. The filenames can then be retrieved from the <code>WindowEvent.Context()</code> using the <code>DroppedFiles()</code> method. This returns a slice of strings containing the filenames.</p>"},{"location":"development/changes/#context-menus","title":"Context Menus","text":"<p>Context menus are contextual menus that are shown when the user right-clicks on an element. Creating a context menu is the same as creating a standard menu , by using <code>app.NewMenu()</code>. To make the context menu available to a window, call <code>window.RegisterContextMenu(name, menu)</code>. The name will be the id of the context menu and used by the frontend.</p> <p>To indicate that an element has a context menu, add the <code>data-contextmenu</code> attribute to the element. The value of this attribute should be the name of a context menu previously registered with the window.</p> <p>It is possible to register a context menu at the application level, making it available to all windows. This can be done using <code>app.RegisterContextMenu(name, menu)</code>. If a context menu cannot be found at the window level, the application context menus will be checked. A demo of this can be found in <code>v3/examples/contextmenus</code>.</p>"},{"location":"development/changes/#wails-markup-language-wml","title":"Wails Markup Language (WML)","text":"<p>The Wails Markup Language is a simple markup language that allows you to add functionality to standard HTML elements without the use of Javascript. </p> <p>The following tags are currently supported:</p>"},{"location":"development/changes/#data-wml-event","title":"<code>data-wml-event</code>","text":"<p>This specifies that a Wails event will be emitted when the element is clicked. The value of the attribute should be the name of the event to emit. </p> <p>Example: <pre><code>&lt;button data-wml-event=\"myevent\"&gt;Click Me&lt;/button&gt;\n</code></pre> Sometimes you need the user to confirm an action. This can be done by adding the <code>data-wml-confirm</code> attribute to the element. The value of this attribute will be the message to display to the user.</p> <p>Example: <pre><code>&lt;button data-wml-event=\"delete-all-items\" data-wml-confirm=\"Are you sure?\"&gt;Delete All Items&lt;/button&gt;\n</code></pre></p>"},{"location":"development/changes/#data-wml-window","title":"<code>data-wml-window</code>","text":"<p>Any <code>wails.window</code> method can be called by adding the <code>data-wml-window</code> attribute to an element. The value of the attribute should be the name of the method to call. The method name should be in the same case as the method.</p> <pre><code>&lt;button data-wml-window=\"Close\"&gt;Close Window&lt;/button&gt;\n</code></pre>"},{"location":"development/changes/#data-wml-trigger","title":"<code>data-wml-trigger</code>","text":"<p>This attribute specifies which javascript event should trigger the action. The default is <code>click</code>. </p> <pre><code>&lt;button data-wml-event=\"hover-box\" data-wml-trigger=\"mouseover\"&gt;Hover over me!&lt;/button&gt;\n</code></pre>"},{"location":"development/changes/#systray","title":"Systray","text":"<p>Wails 3 comes with a built-in systray. This is a fully featured systray that has been designed to be as simple as possible to use. It is possible to set the icon, tooltip and menu of the systray. It is possible to also \"attach\" a window to the systray. Doing this will provide the following functionality:</p> <ul> <li>Clicking the systray icon with toggle the window visibility</li> <li>Right-clicking the systray will open the menu, if there is one</li> </ul> <p>On macOS, if there is no attached window, the systray will use the default method of displaying the menu (any button).  If there is an attached window but no menu, the systray will toggle the window regardless of the button pressed.</p>"},{"location":"development/changes/#plugins","title":"Plugins","text":"<p>Plugins are a way to extend the functionality of your Wails application.</p>"},{"location":"development/changes/#creating-a-plugin","title":"Creating a plugin","text":"<p>Plugins are standard Go structure that adhere to the following interface:</p> <pre><code>type Plugin interface {\nName() string\nInit(*application.App) error\nShutdown() CallableByJS() []string\nInjectJS() string\n}\n</code></pre> <p>The <code>Name()</code> method returns the name of the plugin. This is used for logging purposes.</p> <p>The <code>Init(*application.App) error</code> method is called when the plugin is loaded. The <code>*application.App</code> parameter is the application that the plugin is being loaded into. Any errors will prevent the application from starting.</p> <p>The <code>Shutdown()</code> method is called when the application is shutting down.</p> <p>The <code>CallableByJS()</code> method returns a list of exported functions that can be called from the frontend. These method names must exactly match the names of the methods exported by the plugin.</p> <p>The <code>InjectJS()</code> method returns JavaScript that should be injected into all windows as they are created. This is useful for adding custom JavaScript functions that complement the plugin.</p>"},{"location":"development/changes/#tips","title":"Tips","text":""},{"location":"development/changes/#enums","title":"Enums","text":"<p>In Go, enums are often defined as a type and a set of constants. For example:</p> <pre><code>type MyEnum int\nconst (\nMyEnumOne MyEnum = iota\nMyEnumTwo\nMyEnumThree\n)\n</code></pre> <p>Due to incompatibility between Go and JavaScript, custom types cannot be used in this way. The best strategy is to use a type alias for float64:</p> <pre><code>type MyEnum = float64\nconst (\nMyEnumOne MyEnum = iota\nMyEnumTwo\nMyEnumThree\n)\n</code></pre> <p>In Javascript, you can then use the following:</p> <pre><code>const MyEnum = {\nMyEnumOne: 0,\nMyEnumTwo: 1,\nMyEnumThree: 2\n}\n</code></pre> <ul> <li>Why use <code>float64</code>? Can't we use <code>int</code>? </li> <li>Because JavaScript doesn't have a concept of <code>int</code>. Everything is a <code>number</code>, which translates to <code>float64</code> in Go. There are also restrictions on casting types in Go's reflection package, which means using <code>int</code> doesn't work. </li> </ul>"},{"location":"development/changes/#backgroundcolour","title":"BackgroundColour","text":"<p>In v2, this was a pointer to an <code>RGBA</code> struct. In v3, this is an <code>RGBA</code> struct value.</p>"},{"location":"development/changes/#windowistranslucent","title":"WindowIsTranslucent","text":"<p>This flag has been removed. Now there is a <code>BackgroundType</code> flag that can be used to set the type of background the window should have. This flag can be set to any of the following values: - <code>BackgroundTypeSolid</code> - The window will have a solid background - <code>BackgroundTypeTransparent</code> - The window will have a transparent background - <code>BackgroundTypeTranslucent</code> - The window will have a translucent background</p> <p>On Windows, if the <code>BackgroundType</code> is set to <code>BackgroundTypeTranslucent</code>, the type of translucency can be set using the  <code>BackdropType</code> flag in the <code>WindowsWindow</code> options. This can be set to any of the following values: - <code>Auto</code> - The window will use an effect determined by the system - <code>None</code> - The window will have no background - <code>Mica</code> - The window will use the Mica effect - <code>Acrylic</code> - The window will use the acrylic effect - <code>Tabbed</code> - The window will use the tabbed effect</p>"},{"location":"development/changes/#windows-application-options","title":"Windows Application Options","text":""},{"location":"development/changes/#wndprocinterceptor","title":"WndProcInterceptor","text":"<p>If this is set, the WndProc will be intercepted and the function will be called. This allows you to handle Windows  messages directly. The function should have the following signature:</p> <pre><code>func(hwnd uintptr, msg uint32, wParam, lParam uintptr) (returnValue uintptr, shouldReturn)\n</code></pre> <p>The <code>shouldReturn</code> value should be set to <code>true</code> if the returnValue should be returned by the main wndProc method.  If it is set to <code>false</code>, the return value will be ignored and the message will continue to be processed by the main  wndProc method.</p>"},{"location":"development/changes/#hide-window-on-close-onbeforeclose","title":"Hide Window on Close + OnBeforeClose","text":"<p>In v2, there was the <code>HideWindowOnClose</code> flag to hide the window when it closed. There was a logical overlap between this flag and the <code>OnBeforeClose</code> callback. In v3, the <code>HideWindowOnClose</code> flag has been removed and the <code>OnBeforeClose</code> callback has been renamed to <code>ShouldClose</code>. The <code>ShouldClose</code> callback is called when the user attempts to close a window. If the callback returns <code>true</code>, the window will close. If it returns <code>false</code>, the window will not close. This can be used to hide the window instead of closing it.</p>"},{"location":"development/changes/#window-drag","title":"Window Drag","text":"<p>In v2, the <code>--wails-drag</code> attribute was used to indicate that an element could be used to drag the window.  In v3, this has been replaced with <code>--webkit-app-region</code> to be more in line with the way other frameworks handle this. The <code>--webkit-app-region</code> attribute can be set to any of the following values: - <code>drag</code> - The element can be used to drag the window - <code>no-drag</code> - The element cannot be used to drag the window</p> <p>We would have ideally liked to use <code>app-region</code>, however this is not supported by the <code>getComputedStyle</code> call on  webkit on macOS. </p>"},{"location":"development/introduction/","title":"Introduction","text":"<p>Note<p>This guide is a work in progress.</p> </p> <p>Thanks for wanting to help out with development of Wails! This guide will help you get started.</p>"},{"location":"development/introduction/#getting-started","title":"Getting Started","text":"<ul> <li>Git clone this repository. Checkout the <code>v3-alpha</code> branch.</li> <li> <p>Install the CLI: <code>cd v3/cmd/wails3 &amp;&amp; go install</code></p> </li> <li> <p>Optional: If you are wanting to use the build system to build frontend code, you will need to install npm.</p> </li> </ul>"},{"location":"development/introduction/#building","title":"Building","text":"<p>For simple programs, you can use the standard <code>go build</code> command. It's also possible to use <code>go run</code>.</p> <p>Wails also comes with a build system that can be used to build more complex projects. It utilises the awesome Task build system. For more information, check out the task homepage or run <code>wails task --help</code>. </p>"},{"location":"development/introduction/#project-layout","title":"Project layout","text":"<p>The project has the following structure:</p> <pre><code>```\nv3\n\u251c\u2500\u2500 cmd/wails3                  // CLI\n\u251c\u2500\u2500 examples                   // Examples of Wails apps \n\u251c\u2500\u2500 internal                   // Internal packages\n|   \u251c\u2500\u2500 runtime                // The Wails JS runtime\n|   \u2514\u2500\u2500 templates              // The supported project templates\n\u251c\u2500\u2500 pkg\n|   \u251c\u2500\u2500 application            // The core Wails library\n|   \u2514\u2500\u2500 events                 // The event definitions\n|   \u2514\u2500\u2500 mac                    // macOS specific code used by plugins\n|   \u2514\u2500\u2500 w32                    // Windows specific code\n\u251c\u2500\u2500 plugins                    // Supported plugins\n\u251c\u2500\u2500 tasks                      // General tasks\n\u2514\u2500\u2500 Taskfile.yaml              // Development tasks configuration\n```\n</code></pre>"},{"location":"development/introduction/#development","title":"Development","text":""},{"location":"development/introduction/#adding-window-functionality","title":"Adding window functionality","text":"<p>The preferred way to add window functionality is to add a new function to the <code>pkg/application/webview_window.go</code> file. This should implement all the functionality required for all platforms. Any platform specific code should be called via a <code>webviewWindowImpl</code> interface method. This interface is implemented by each of the target platforms to provide the platform specific functionality. In some cases, this may do nothing. Once you've added the interface method, ensure each platform implements it. A good example of this is the <code>SetMinSize</code> method.</p> <ul> <li>Mac: <code>webview_window_darwin.go</code></li> <li>Windows: <code>webview_window_windows.go</code></li> <li>Linux: <code>webview_window_linux.go</code></li> </ul> <p>Most, if not all, of the platform specific code should be run on the main thread. To simplify this, there are a number of <code>invokeSync</code> methods defined in <code>application.go</code>. </p>"},{"location":"development/introduction/#updating-the-runtime","title":"Updating the runtime","text":"<p>The runtime is located in <code>v3/internal/runtime</code>. When the runtime is updated, the following steps need to be taken:</p> <pre><code>wails3 task runtime:build\n</code></pre>"},{"location":"development/introduction/#events","title":"Events","text":"<p>Events are defined in <code>v3/pkg/events</code>. When adding a new event, the following steps need to be taken:</p> <ul> <li>Add the event to the <code>events.txt</code> file</li> <li>Run <code>wails3 task events:generate</code></li> </ul> <p>There are a number of types of events: platform specific application and window events + common events. The common events are useful for cross-platform event handling, but you aren't limited to the \"lowest common denominator\". You can use the platform specific events if you need to.</p> <p>When adding a common event, ensure that the platform specific events are mapped. An example of this is in <code>window_webview_darwin.go</code>:</p> <pre><code>        // Translate ShouldClose to common WindowClosing event\nw.parent.On(events.Mac.WindowShouldClose, func(_ *WindowEventContext) {\nw.parent.emit(events.Common.WindowClosing)\n})\n</code></pre> <p>NOTE: We may try to automate this in the future by adding the mapping to the event definition.</p>"},{"location":"development/introduction/#plugins","title":"Plugins","text":"<p>Plugins are a way to extend the functionality of your Wails application.</p>"},{"location":"development/introduction/#creating-a-plugin","title":"Creating a plugin","text":"<p>Plugins are standard Go structure that adhere to the following interface:</p> <pre><code>type Plugin interface {\nName() string\nInit(*application.App) error\nShutdown() CallableByJS() []string\nInjectJS() string\n}\n</code></pre> <p>The <code>Name()</code> method returns the name of the plugin. This is used for logging purposes.</p> <p>The <code>Init(*application.App) error</code> method is called when the plugin is loaded. The <code>*application.App</code> parameter is the application that the plugin is being loaded into. Any errors will prevent the application from starting.</p> <p>The <code>Shutdown()</code> method is called when the application is shutting down.</p> <p>The <code>CallableByJS()</code> method returns a list of exported functions that can be called from the frontend. These method names must exactly match the names of the methods exported by the plugin.</p> <p>The <code>InjectJS()</code> method returns JavaScript that should be injected into all windows as they are created. This is useful for adding custom JavaScript functions that complement the plugin.</p>"},{"location":"development/introduction/#misc-tasks","title":"Misc Tasks","text":""},{"location":"development/introduction/#upgrading-taskfile","title":"Upgrading Taskfile","text":"<p>The Wails CLI uses the Task build system. It is imported as a library and used to run the tasks defined in <code>Taskfile.yaml</code>. The main interfacing with Task happens in <code>v3/internal/commands/task.go</code>.</p> <p>To check if there's an upgrade for Taskfile, run <code>wails3 task -version</code> and check against the Task website.</p> <p>To upgrade the version of Taskfile used, run:</p> <pre><code>wails3 task taskfile:upgrade\n</code></pre> <p>If there are incompatibilities then they should appear in the <code>v3/internal/commands/task.go</code> file.</p> <p>Usually the best way to fix incompatibilities is to clone the task repo at <code>https://github.com/go-task/task</code> and look at the git history to determine what has changed and why.</p> <p>To check all changes have worked correctly, re-install the CLI and check the version again:</p> <pre><code>wails3 task cli:install\nwails3 task -version\n</code></pre>"},{"location":"development/introduction/#opening-a-pr","title":"Opening a PR","text":"<p>Make sure that all PRs have a ticket associated with them providing context to the change. If there is no ticket, please create one first. Ensure that all PRs have updated the CHANGELOG.md file with the changes made. The CHANGELOG.md file is located in the <code>v3</code> directory.</p>"},{"location":"development/introduction/#misc-tasks_1","title":"Misc Tasks","text":""},{"location":"development/introduction/#upgrading-taskfile_1","title":"Upgrading Taskfile","text":"<p>The Wails CLI uses the Task build system. It is imported as a library and used to run the tasks defined in <code>Taskfile.yaml</code>. The main interfacing with Task happens in <code>v3/internal/commands/task.go</code>.</p> <p>To check if there's an upgrade for Taskfile, run <code>wails3 task -version</code> and check against the Task website.</p> <p>To upgrade the version of Taskfile used, run:</p> <pre><code>wails3 task taskfile:upgrade\n</code></pre> <p>If there are incompatibilities then they should appear in the <code>v3/internal/commands/task.go</code> file.</p> <p>Usually the best way to fix incompatibilities is to clone the task repo at <code>https://github.com/go-task/task</code> and look at the git history to determine what has changed and why.</p> <p>To check all changes have worked correctly, re-install the CLI and check the version again:</p> <pre><code>wails3 task cli:install\nwails3 task -version\n</code></pre>"},{"location":"development/status/","title":"Status","text":"<p>Status of features in v3.</p> <p>Note<p>This list is a mixture of public and internal API support. It is not complete and probably not up to date.</p> </p>"},{"location":"development/status/#known-issues","title":"Known Issues","text":"<ul> <li>Linux is not yet up to feature parity with Windows/Mac</li> </ul>"},{"location":"development/status/#application","title":"Application","text":"<p>Application interface methods</p> Method Windows Linux Mac Notes run() error Y Y Y destroy() Y Y setApplicationMenu(menu *Menu) Y Y Y name() string Y Y getCurrentWindowID() uint Y Y Y showAboutDialog(name string, description string, icon []byte) Y Y setIcon(icon []byte) - Y Y on(id uint) Y dispatchOnMainThread(fn func()) Y Y Y hide() Y Y Y show() Y Y Y getPrimaryScreen() (*Screen, error) Y Y getScreens() ([]*Screen, error) Y Y"},{"location":"development/status/#webview-window","title":"Webview Window","text":"<p>Webview Window Interface Methods</p> Method Windows Linux Mac Notes center() Y Y Y close() y Y Y destroy() Y Y execJS(js string) y Y Y focus() Y Y forceReload() Y Y fullscreen() Y Y Y getScreen() (*Screen, error) y Y Y getZoom() float64 Y Y height() int Y Y Y hide() Y Y Y isFullscreen() bool Y Y Y isMaximised() bool Y Y Y isMinimised() bool Y Y Y maximise() Y Y Y minimise() Y Y Y nativeWindowHandle() (uintptr, error) Y Y on(eventID uint) y Y openContextMenu(menu Menu, data ContextMenuData) y Y relativePosition() (int, int) Y Y Y reload() y Y Y run() Y Y Y setAlwaysOnTop(alwaysOnTop bool) Y Y Y setBackgroundColour(color RGBA) Y Y Y setEnabled(bool) Y Y setFrameless(bool) Y Y setFullscreenButtonEnabled(enabled bool) - Y Y There is no fullscreen button in Windows setHTML(html string) Y Y Y setMaxSize(width, height int) Y Y Y setMinSize(width, height int) Y Y Y setRelativePosition(x int, y int) Y Y Y setResizable(resizable bool) Y Y Y setSize(width, height int) Y Y Y setTitle(title string) Y Y Y setURL(url string) Y Y Y setZoom(zoom float64) Y Y Y show() Y Y Y size() (int, int) Y Y Y toggleDevTools() Y Y Y unfullscreen() Y Y Y unmaximise() Y Y Y unminimise() Y Y Y width() int Y Y Y zoom() Y Y zoomIn() Y Y Y zoomOut() Y Y Y zoomReset() Y Y Y"},{"location":"development/status/#runtime","title":"Runtime","text":""},{"location":"development/status/#application_1","title":"Application","text":"Feature Windows Linux Mac Notes Quit Y Y Y Hide Y Y Show Y Y"},{"location":"development/status/#dialogs","title":"Dialogs","text":"Feature Windows Linux Mac Notes Info Y Y Y Warning Y Y Y Error Y Y Y Question Y Y Y OpenFile Y Y SaveFile Y Y"},{"location":"development/status/#clipboard","title":"Clipboard","text":"Feature Windows Linux Mac Notes SetText Y Y Text Y Y"},{"location":"development/status/#contextmenu","title":"ContextMenu","text":"Feature Windows Linux Mac Notes OpenContextMenu Y Y On By Default Control via HTML Y <p>The default context menu is enabled by default for all elements that are <code>contentEditable: true</code>, <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> tags or have the <code>--default-contextmenu: true</code> style set. The <code>--default-contextmenu: show</code> style will always show the context menu The <code>--default-contextmenu: hide</code> style will always hide the context menu</p> <p>Anything nested under a tag with <code>--default-contextmenu: hide</code> style will not show the context menu unless it is explicitly set with <code>--default-contextmenu: show</code>.</p>"},{"location":"development/status/#screens","title":"Screens","text":"Feature Windows Linux Mac Notes GetAll Y Y Y GetPrimary Y Y Y GetCurrent Y Y Y"},{"location":"development/status/#system","title":"System","text":"Feature Windows Linux Mac Notes IsDarkMode Y"},{"location":"development/status/#window","title":"Window","text":"<p>Y = Supported U = Untested</p> <ul> <li>= Not available</li> </ul> Feature Windows Linux Mac Notes Center Y Y Y Focus Y Y FullScreen Y Y Y GetZoom Y Y Y Get current view scale Height Y Y Y Hide Y Y Y Maximise Y Y Y Minimise Y Y Y RelativePosition Y Y Y Screen Y Y Y Get screen for window SetAlwaysOnTop Y Y Y SetBackgroundColour Y Y Y https://github.com/MicrosoftEdge/WebView2Feedback/issues/1621#issuecomment-938234294 SetEnabled Y U U Set the window to be enabled/disabled SetMaxSize Y Y Y SetMinSize Y Y Y SetRelativePosition Y Y Y SetResizable Y Y Y SetSize Y Y Y SetTitle Y Y Y SetZoom Y Y Y Set view scale Show Y Y Y Size Y Y Y UnFullscreen Y Y Y UnMaximise Y Y Y UnMinimise Y Y Y Width Y Y Y ZoomIn Y Y Y Increase view scale ZoomOut Y Y Y Decrease view scale ZoomReset Y Y Y Reset view scale"},{"location":"development/status/#window-options","title":"Window Options","text":"<p>A 'Y' in the table below indicates that the option has been tested and is applied when the window is created. An 'X' indicates that the option is not supported by the platform.</p> Feature Windows Linux Mac Notes AlwaysOnTop Y BackgroundColour Y Y BackgroundType Acrylic seems to work but the others don't CSS Y Y DevToolsEnabled Y Y Y DisableResize Y Y EnableDragAndDrop Y EnableFraudulentWebsiteWarnings Focused Y Y Frameless Y Y FullscreenButtonEnabled Y Height Y Y Hidden Y Y HTML Y Y JS Y Y Mac - - MaxHeight Y Y MaxWidth Y Y MinHeight Y Y MinWidth Y Y Name Y Y OpenInspectorOnStartup StartState Y Title Y Y URL Y Y Width Y Y Windows Y - - X Y Y Y Y Y Zoom ZoomControlEnabled"},{"location":"development/status/#log","title":"Log","text":"<p>To log or not to log? System logger vs custom logger.</p>"},{"location":"development/status/#menu","title":"Menu","text":"Event Windows Linux Mac Notes Default Application Menu Y Y Y"},{"location":"development/status/#tray-menus","title":"Tray Menus","text":"Feature Windows Linux Mac Notes Icon Y Y Windows has default icons for light/dark mode &amp; supports PNG or ICO. Label - Y Label (ANSI Codes) - Menu Y Y"},{"location":"development/status/#methods","title":"Methods","text":"Method Windows Linux Mac Notes setLabel(label string) - Y run() Y Y setIcon(icon []byte) Y Y setMenu(menu *Menu) Y Y setIconPosition(position int) - Y setTemplateIcon(icon []byte) - Y destroy() Y Y setDarkModeIcon(icon []byte) Y Y"},{"location":"development/status/#cross-platform-events","title":"Cross Platform Events","text":"<p>Mapping native events to cross-platform events.</p> Event Windows Linux Mac Notes WindowWillClose WindowWillClose WindowDidClose WindowDidResize WindowDidHide ApplicationWillTerminate <p>... Add more</p>"},{"location":"development/status/#bindings-generation","title":"Bindings Generation","text":"<p>Working well.</p>"},{"location":"development/status/#models-generation","title":"Models Generation","text":"<p>Working well.</p>"},{"location":"development/status/#task-file","title":"Task file","text":"<p>Contains a lot needed for development.</p>"},{"location":"development/status/#theme","title":"Theme","text":"Mode Windows Linux Mac Notes Dark Y Light Y System Y"},{"location":"development/status/#nsis-installer","title":"NSIS Installer","text":"<p>TBD</p>"},{"location":"development/status/#templates","title":"Templates","text":"<p>All templates are working.</p>"},{"location":"development/status/#plugins","title":"Plugins","text":"<p>Built-in plugin support:</p> Plugin Windows Linux Mac Notes Browser Y Y KV Store Y Y Y Log Y Y Y Single Instance Y Y SQLite Y Y Y Start at login Y Y Server <p>TODO:</p> <ul> <li>Ensure each plugin has a JS wrapper that can be injected into the window.</li> </ul>"},{"location":"development/status/#packaging","title":"Packaging","text":"Windows Linux Mac Notes Icon Generation Y Y Icon Embedding Y Y Info.plist - Y NSIS Installer - Mac bundle - Y Windows exe Y -"},{"location":"development/status/#frameless-windows","title":"Frameless Windows","text":"Feature Windows Linux Mac Notes Resize Y Y Drag Y Y Y Linux - can always drag with <code>Meta</code>+left mouse"},{"location":"development/status/#mac-specific","title":"Mac Specific","text":"<ul> <li> Translucency</li> </ul>"},{"location":"development/status/#mac-options","title":"Mac Options","text":"Feature Default Notes Backdrop MacBackdropNormal Standard solid window DisableShadow false TitleBar Standard window decorations by default Appearance DefaultAppearance InvisibleTitleBarHeight 0 Creates an invisible title bar for frameless windows DisableShadow false Disables the window drop shadow"},{"location":"development/status/#windows-specific","title":"Windows Specific","text":"<ul> <li> Translucency</li> <li> Custom Themes</li> </ul>"},{"location":"development/status/#windows-options","title":"Windows Options","text":"Feature Default Notes BackdropType Solid DisableIcon false Theme SystemDefault CustomTheme nil DisableFramelessWindowDecorations false WindowMask nil Makes the window the contents of the bitmap"},{"location":"development/status/#linux-specific","title":"Linux Specific","text":"<p>Implementation details for the functions utilized by the <code>*_linux.go</code> files are located in the following files:</p> <ul> <li>linux_cgo.go: CGo implementation</li> <li>linux_purego.go: PureGo implementation</li> </ul>"},{"location":"development/status/#cgo","title":"CGO","text":"<p>By default CGO is utilized to compile the Linux port. This prevents easy cross-compilation and so the PureGo implementation is also being simultaneously developed.</p>"},{"location":"development/status/#purego","title":"Purego","text":"<p>The examples can be compiled using the following command:</p> <pre><code>CGO_ENABLED=0 go build -tags purego\n</code></pre> <p>Note: things are currently not working after the refactor</p>"},{"location":"development/status/#examples","title":"Examples","text":"Example Windows Linux Mac binding NO build Yes (Debug + Prod) clipboard Yes contextmenus Yes dialogs Almost drag-n-drop NO events NO frameless Yes kitchensink Yes menu Yes plain Yes plugins Yes screen Yes systray Yes Yes window Yes windowjs Example not complete wml Yes"},{"location":"development/status/#alpha-release-todo","title":"Alpha Release TODO","text":"<ul> <li> Check all runtime methods are available in the JS runtime</li> </ul>"},{"location":"development/status/#beta-release-todo","title":"Beta Release TODO","text":"<ul> <li> Make better looking examples</li> </ul>"},{"location":"getting-started/feedback/","title":"Feedback","text":"<p>We welcome (and encourage) your feedback! Here are the different ways to provide feedback:</p> BugsFixesSuggestionsUpvoting <p>If you find a bug, please let us know by posting into the v3 Alpha Feedback channel on Discord:</p> <ul> <li>The post should clearly state what the bug is and have a simple reproducible example. If the docs are unclear what should happen, please include that in the post.</li> <li>The post should be given the <code>Bug</code> tag.</li> <li>Please include the output of <code>wails doctor</code> in your post.</li> <li>Remember unexpected behaviour isn't necessarily a bug - it might just not do what you expect it to do. Use Suggestions for this.</li> </ul> <p>If you have a fix for a bug or an update for documentation, please do the following:</p> <ul> <li>Open a pull request on the Wails repository. The title of the PR should start with <code>[v3]</code>.</li> <li>Create a post in the v3 Alpha Feedback channel.</li> <li>The post should be given the <code>PR</code> tag.</li> <li>Please include a link to the PR in your post.</li> </ul> <p>If you have a suggestion, please let us know by posting into the v3 Alpha Feedback channel on Discord:</p> <ul> <li>The post should be given the <code>Suggestion</code> tag.</li> </ul> <p>Please feel free to reach out to us on Discord if you have any questions.</p> <ul> <li>Posts can be \"upvoted\" by using the  emoji. Please apply to any posts that are a priority for you. </li> <li>Please don't just add comments like \"+1\" or \"me too\". </li> <li>Please feel free to comment if there is more to add to the post, such as \"this bug also affect ARM builds\" or \"Another option would be to .....\"</li> </ul> <p>Things we are looking for feedback on:</p> <ul> <li>The API <ul> <li>Is it easy to use? </li> <li>Does it do what you expect?</li> <li>Is it missing anything?</li> <li>Is there anything that should be removed?</li> <li>Is it consistent between Go and JS?</li> </ul> </li> <li>The build system <ul> <li>Is it easy to use? </li> <li>Can we improve it?</li> </ul> </li> <li>The examples<ul> <li>Are they clear?</li> <li>Do they cover the basics?</li> </ul> </li> <li>Features<ul> <li>What features are missing?</li> <li>What features are not needed?</li> </ul> </li> <li>Documentation<ul> <li>What could be clearer?</li> </ul> </li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>To install the Wails CLI, ensure you have Go 1.21+ installed and run:</p> <pre><code>go install github.com/wailsapp/wails/v3/cmd/wails3@latest\n</code></pre>"},{"location":"getting-started/installation/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>Windows 10/11 AMD64/ARM64</li> <li>MacOS 10.13+ AMD64</li> <li>MacOS 11.0+ ARM64</li> <li>Linux AMD64/ARM64</li> </ul>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>Wails has a number of common dependencies that are required before installation:</p> Go 1.21+npm (Optional)Task (Optional) <p>Download Go from the Go Downloads Page.</p> <p>Ensure that you follow the official Go installation instructions. You will also need to ensure that your <code>PATH</code> environment variable also includes the path to your <code>~/go/bin</code> directory. Restart your terminal and do the following checks:</p> <ul> <li>Check Go is installed correctly: <code>go version</code></li> <li>Check <code>~/go/bin</code> is in your PATH variable: <code>echo $PATH | grep go/bin</code></li> </ul> <p>Although Wails doesn't require npm to be installed, it is needed if you want to use the bundled templates.</p> <p>Download the latest node installer from the Node Downloads Page. It is best to use the latest release as that is what we generally test against.</p> <p>Run <code>npm --version</code> to verify.</p> <p>The Wails CLI embeds a task runner called Task. It is optional, but recommended. If you do not wish to install Task, you can use the <code>wails3 task</code> command instead of <code>task</code>. Installing Task will give you the greatest flexibility.</p>"},{"location":"getting-started/installation/#platform-specific-dependencies","title":"Platform Specific Dependencies","text":"<p>You will also need to install platform specific dependencies:</p> MacWindowsLinux <p>Wails requires that the xcode command line tools are installed. This can be done by running:</p> <pre><code>xcode-select --install\n</code></pre> <p>Wails requires that the WebView2 Runtime is installed. Some Windows installations will already have this installed. You can check using the <code>wails doctor</code> command.</p> <p>Linux requires the standard <code>gcc</code> build tools plus <code>libgtk3</code> and <code>libwebkit</code>. Rather than list a ton of commands for different distros, Wails can try to determine what the installation commands are for your specific distribution. Run <code>wails doctor</code> after installation to be shown how to install the dependencies. If your distro/package manager is not supported, please let us know on discord.</p>"},{"location":"getting-started/installation/#system-check","title":"System Check","text":"<p>Running <code>wails3 doctor</code> will check if you have the correct dependencies installed. If not, it will advise on what is missing and help on how to rectify any problems.</p>"},{"location":"getting-started/installation/#the-wails3-command-appears-to-be-missing","title":"The <code>wails3</code> command appears to be missing?","text":"<p>If your system is reporting that the <code>wails3</code> command is missing, check the following:</p> <ul> <li>Make sure you have followed the Go installation guide correctly. </li> <li>Check that the <code>go/bin</code> directory is in the <code>PATH</code> environment variable. </li> <li>Close/Reopen current terminals to pick up the new <code>PATH</code> variable.</li> </ul>"},{"location":"getting-started/next-steps/","title":"Next Steps","text":"<p>Now that you have Wails installed, you can start exploring the alpha version.</p> <p>The best place to start is the <code>examples</code> directory in the Wails repository. This contains a number of examples that you can run and play with.</p>"},{"location":"getting-started/next-steps/#running-an-example","title":"Running an example","text":"<p>To run an example, you can simply use:</p> <p><pre><code>go run .\n</code></pre> in the example directory.</p>"},{"location":"getting-started/next-steps/#creating-a-new-project","title":"Creating a new project","text":"<p>To create a new project, you can use the <code>wails3 init</code> command. This will create a new project in the current directory.</p> <p>Wails3 uses Task as its build system by default, although there is no reason why you can't  use your own build system, or use <code>go build</code> directly. Wails has the task build system built in and can be run using <code>wails3 task</code>.</p> <p>If you look through the <code>Taskfile.yaml</code> file, you will see that there are a number of tasks defined. The most important one is the <code>build</code> task. This is the task that is run when you use <code>wails3 build</code>.</p> <p>The task file is unlikely to be complete and is subject to change over time.</p>"},{"location":"getting-started/next-steps/#building-a-project","title":"Building a project","text":"<p>To build a project, you can use the <code>wails3 build</code> command. This is a shortcut for <code>wails3 task build</code>.</p>"}]}